apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: proyecto-de-prueba
  title: Proyecto de Prueba
  description: Un proyecto para probar un poco todo.
  tags:
    - mvc
    - prueba
    - python
    - tests
spec:
  owner: user:ManuFernandez03
  type: service

  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Introduce el nombre del proyecto
      required:
        - name
        - owner
        - system
        - description
      properties:
        name:
          title: Name
          type: string
          description: Unique name of the component
          ui:autofocus: true
          ui:options:
            rows: 5
          # ui:field: ValidateNoEspacios # Un validador custom
        description:
          title: Incluye una descripccion para el proyecto
          type: string
          description: Descripccion del proyecto
        owner:
          title: Selecciona un grupo al que pertenezcas
          type: string
          description: Grupo al que pertenece el componente
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              Kind: Group
        system:
          title: Selecciona el sistema al que pertenece
          type: string
          description: El sistema al que pertenece el componente
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              Kind: System
    - title: Elige la localizacion del Repositorio
      required:
        - repoUrl
      properties:
        repoUrl:
          title: URL del Repo
          type: string
          description: Elige un repositorio 
          ui:field: RepoUrlPicker
          ui:options:
            allowedOwners:
              - ManuFernandez03
              - guest
            allowedHosts:
              - github.com

  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    # Each step executes an action, in this case one templates files into the working directory.
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./proyecto
        values:
          name: ${{ parameters.name }}
          description: ${{ parameters.description }}
          owner: ${{ parameters.owner }}
          system: ${{ parameters.system }}
          repoUrl: ${{ parameters.repoUrl }}

    # This step publishes the contents of the working directory to GitHub.
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}

    # Una accion extra para crear un readme
    - id: acme:file:create
      name: Crear un README
      action: acme:file:create
      input:
        url: ${{ parameters.repoUrl }}
        filename: README.md
        contents: ${{ parameters.description }}

    # Una accion custom para ejecutar unos test
    # - id: github-action
    #   name: Publish
    #   action: publish:github
    #   input:
    #     workflowId: ci.yml
    #     repoUrl: ${{ parameters.repoUrl }}
    #     branchOrTagName: "main"

    # The final step is to register our new component in the catalog.
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
